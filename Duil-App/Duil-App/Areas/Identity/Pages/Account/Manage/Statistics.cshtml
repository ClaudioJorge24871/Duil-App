@page
@model Duil_App.Areas.Identity.Pages.Account.Manage.StatisticsModel
@{
    ViewData["Title"] = "Estatísicas";
    ViewData["ActivePage"] = ManageNavPages.Statistics;
}

<h3>@ViewData["Title"]</h3>

<div class="row">
    <div class="col-md-9">
        <div class="d-flex">
            <ul class="list-group flex-grow-1 me-3">
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    <span><i class="bi bi-bag-fill me-2 text-primary"></i> Total de Encomendas</span>
                    <strong>@Model.TotalEncomendas</strong>
                </li>
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    <span><i class="bi bi-check-circle-fill me-2 text-success"></i> Encomendas Concretizadas</span>
                    <strong>@Model.EncomendasConcretizadas</strong>
                </li>
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    <span><i class="bi bi-gear-fill me-2 text-warning"></i> Número de Peças Associadas</span>
                    <strong>@Model.NumeroPecas</strong>
                </li>
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    <span><i class="bi bi-calendar-check-fill me-2 text-info"></i> Última Encomenda</span>
                    <strong>
                        @(Model.DataUltimaEncomenda.HasValue
                            ? Model.DataUltimaEncomenda.Value.ToString("dd/MM/yyyy")
                            : "N/A")
                    </strong>
                </li>
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    <span><i class="bi bi-award-fill me-2 text-secondary"></i> Peça Mais Encomendada</span>
                    <strong>@(!string.IsNullOrEmpty(Model.PecaMaisEncomendada) ? Model.PecaMaisEncomendada : "N/A")</strong>
                </li>
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    <span><i class="bi bi-boxes me-2 text-dark"></i> Total de Peças Encomendadas</span>
                    <strong>@Model.TotalQuantidadePecas</strong>
                </li>
            </ul>

            <div class="d-flex flex-column align-items-center ms-3">
                <h5 class="mb-3">Distribuição</h5>
                <canvas id="encomendasPieChart" style="width:200px; height:200px;"></canvas>
            </div>
        </div>
    </div>

    <div class="col-md-2 mt-4">
        <ul class="list-inline">
            <li class="list-inline-item"><span class="legend-box bg-warning"></span> Pendente</li>
            <li class="list-inline-item"><span class="legend-box bg-primary"></span> Confirmada</li>
            <li class="list-inline-item"><span class="legend-box bg-success"></span> Concretizada</li>
            <li class="list-inline-item"><span class="legend-box bg-danger"></span> Cancelada</li>
        </ul>
    </div>
</div>

<style>
    .legend-box {
        display: inline-block;
        width: 14px;
        height: 14px;
        border-radius: 3px;
        margin-right: 5px;
    }
</style>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        const ctx = document.getElementById('encomendasPieChart').getContext('2d');
        const encomendasPieChart = new Chart(ctx, {
            type: 'pie',
            data: {
                labels: ['Pendente', 'Confirmada', 'Concretizada', 'Cancelada'],
                datasets: [{
                    label: 'Distribuição de Encomendas',
                    data: [
        @Model.NumPendente,
        @Model.NumConfirmada,
        @Model.NumConcretizada,
        @Model.NumCancelada
                            ],
                    backgroundColor: [
                        'rgba(255, 193, 7, 0.7)',
                        'rgba(13, 110, 253, 0.7)',
                        'rgba(40, 167, 69, 0.7)',
                        'rgba(220, 53, 69, 0.7)'
                    ],
                    borderColor: [
                        'rgba(255, 193, 7, 1)',
                        'rgba(13, 110, 253, 1)',
                        'rgba(40, 167, 69, 1)',
                        'rgba(220, 53, 69, 1)'
                    ],
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: { display: false },
                    tooltip: {
                        callbacks: {
                            label: function (context) {
                                const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                const value = context.raw;
                                const percentage = ((value / total) * 100).toFixed(1);
                                return `${context.label}: ${value} (${percentage}%)`;
                            }
                        }
                    }
                }
            }
        });
    </script>
}
