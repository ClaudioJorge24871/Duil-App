@model Duil_App.Models.Encomendas

@{
    ViewData["Title"] = "Edit";
    int parsedClienteId = 0;
    int.TryParse(Model.ClienteId, out parsedClienteId);
}

<div>
    <a asp-action="Index"><i class="bi bi-arrow-left fs-3 ms-3" style="color:#6B97AC"></i></a>
</div>

<div class="d-flex justify-content-center mt-5 min-vh-100">
    <div class="container mt-5" style="width:80%">
        <h3 class="mb-2 grey-text">Editar Encomenda @Html.DisplayFor(Model => Model.Id)</h3>
        <hr />
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="Id" />

            <div class="row mt-5">
                <div class="col-md-5 me-5">
                    <div class="form-group mb-3">
                        <input asp-for="IdLadoCliente" class="form-control" placeholder="ID Lado Cliente" />
                        <span asp-validation-for="IdLadoCliente" class="text-danger"></span>
                    </div>

                    <div class="form-group mb-3">
                        <input asp-for="Data" class="form-control" placeholder="Data" />
                        <span asp-validation-for="Data" class="text-danger"></span>
                    </div>

                    <div class="form-group mb-3">
                        <input asp-for="Transportadora" class="form-control" placeholder="Transportadora" />
                        <span asp-validation-for="Transportadora" class="text-danger"></span>
                    </div>

                    <div class="form-group mb-3">
                        <select asp-for="Estado" class="form-control" asp-items="@(ViewData["Estado"] as SelectList)">
                            <option value="">-- Estado --</option>
                        </select>
                        <span asp-validation-for="Estado" class="text-danger"></span>
                    </div>

                    <div class="form-group mb-3">
                        <input type="text" id="cliente-nome" class="form-control" value="@Model.Cliente?.Nome" placeholder="Cliente" />
                        <input asp-for="ClienteId" type="hidden" id="ClienteId" />
                        <span asp-validation-for="ClienteId" class="text-danger"></span>
                    </div>

                    <div class="form-group mb-3">
                        <input asp-for="QuantidadeTotal" class="form-control" readonly placeholder="Quantidade Total" />
                        <span asp-validation-for="QuantidadeTotal" class="text-danger"></span>
                    </div>

                    <div class="form-group mb-3">
                        <input asp-for="TotalPrecoUnit" class="form-control" readonly placeholder="Total (€)" />
                        <span asp-validation-for="TotalPrecoUnit" class="text-danger"></span>
                    </div>

                    <div class="form-group mb-3">
                        <input type="submit" value="Guardar Alterações" class="btn btn-custom mt-3" />
                    </div>
                </div>

                <div class="col-md-6 ms-2">
                    <div id="pecasContainer">
                        @foreach (var linha in Model.LinhasEncomenda)
                        {
                            <div class="peca-row mb-4">
                                <div class="form-group mb-2">
                                    <label>Peça</label>
                                    <select name="pecasSelecionadas" class="form-control peca-select" data-selected="@linha.PecaId">
                                        <option value="">-- Selecione uma peça --</option>
                                    </select>
                                </div>
                                <div class="form-group d-flex align-items-center gap-3">
                                    <input type="number" name="quantidades" class="form-control" value="@linha.Quantidade" placeholder="Quantidade" />
                                    <button type="button" class="btn btn-danger remove-peca">Remover</button>
                                </div>
                            </div>
                        }
                    </div>

                    <button type="button" id="addPeca" class="btn btn-secondary mb-3">Adicionar Peça</button>
                </div>
            </div>
        </form>
    </div>
</div>


@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script src="https://code.jquery.com/ui/1.13.2/jquery-ui.min.js"></script>
    <link rel="stylesheet" href="https://code.jquery.com/ui/1.13.2/themes/base/jquery-ui.css" />

    <script>
        $(function () {
            let clienteSelected = @((parsedClienteId > 0).ToString().ToLower());
            const pecasData = {};

            if (@parsedClienteId > 0) {
                loadPecas('@Model.ClienteId');
            }

            $("#cliente-nome").autocomplete({
                source: '/Clientes/Search',
                minLength: 1,
                select: function (event, ui) {
                    $("#cliente-nome").val(ui.item.label);
                    $("#ClienteId").val(ui.item.value);
                    clienteSelected = true;
                    loadPecas(ui.item.value);
                    return false;
                },
                focus: function (event, ui) {
                    event.preventDefault();
                }
            });

            function populateSelect(select) {
                const selectedValue = select.data('selected');
                select.empty().append('<option value="">-- Selecione uma peça --</option>');

                for (const id in pecasData) {
                    const peca = pecasData[id];
                    const displayPrice = peca.preco.toFixed(2).replace('.', ',');
                    const option = new Option(`${peca.nome} (${displayPrice} €)`, id);
                    if (selectedValue && id == selectedValue) {
                        option.selected = true;
                    }
                    select.append(option);
                }

                select.removeAttr('data-selected');
            }

            function updateTotals() {
                let totalQuantity = 0;
                let totalPrice = 0;

                $('.peca-row').each(function () {
                    const select = $(this).find('select');
                    const quantityInput = $(this).find('input[type="number"]');
                    const pecaId = select.val();
                    const quantity = parseInt(quantityInput.val()) || 0;

                    if (pecaId && pecasData[pecaId]) {
                        totalQuantity += quantity;
                        totalPrice += parseFloat(pecasData[pecaId].preco) * quantity;
                    }
                });

                $('#QuantidadeTotal').val(totalQuantity);
                $('#TotalPrecoUnit').val(totalPrice.toFixed(2).replace('.', ',')); // Mostra com virgula
                $('input[name="QuantidadeTotal"]').val(totalQuantity);
                $('input[name="TotalPrecoUnit"]').val(totalPrice.toFixed(2));
            }

            function loadPecas(clienteId) {
                fetch(`/Encomendas/GetPecasPorCliente?clienteId=${clienteId}`)
                    .then(response => response.json())
                    .then(data => {
                        Object.keys(pecasData).forEach(key => delete pecasData[key]);
                        data.forEach(p => {
                            pecasData[p.id] = {
                                nome: p.nome,
                                preco: parseFloat(p.preco)
                            };
                        });

                        $('select[name="pecasSelecionadas"]').each(function () {
                            populateSelect($(this));
                        });

                        updateTotals();
                    });
            }

            $('#addPeca').click(function () {
                const newRow = $(`
                    <div class="peca-row">
                        <div class="form-group">
                            <label>Peça</label>
                            <select name="pecasSelecionadas" class="form-control peca-select">
                                <option value="">-- Selecione uma peça --</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label>Quantidade</label>
                            <input type="number" name="quantidades" class="form-control" value="1" />
                            <button type="button" class="btn btn-danger remove-peca">Remover</button>
                        </div>
                    </div>`);

                $('#pecasContainer').append(newRow);
                populateSelect(newRow.find('select[name="pecasSelecionadas"]'));
                updateTotals();
            });

            $(document).on('click', '.remove-peca', function () {
                $(this).closest('.peca-row').remove();
                updateTotals();
            });

            $(document).on('change', '.peca-select, input[name="quantidades"]', function () {
                updateTotals();
            });

            $("form").on("submit", function (event) {
                let isValid = true;
                const clienteId = $("#ClienteId").val();

                if (!clienteSelected || clienteId === "") {
                    $("[data-valmsg-for='ClienteId']").text("O cliente é obrigatório");
                    isValid = false;
                }

                $('.peca-select').each(function () {
                    if ($(this).val() === "") {
                        $(this).addClass('is-invalid');
                        isValid = false;
                    }
                });

                if (!isValid) {
                    event.preventDefault();
                }
            });
        });
    </script>
}
