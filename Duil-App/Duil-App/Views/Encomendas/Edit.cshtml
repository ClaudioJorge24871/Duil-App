@model Duil_App.Models.Encomendas
@using Duil_App.Resources

@using Duil_App.Models

@{
    ViewData["Title"] = Resource.modificarEncomendaViewTitle;
    var clienteId = Model.ClienteId;
}

<div>
    <a asp-action="Index"><i class="bi bi-arrow-left fs-3 ms-3" title=@Resource.voltarTexto style="color:#6B97AC"></i></a>
</div>

<div class="d-flex justify-content-center mt-5 min-vh-100">
    <div class="container mt-5" style="width:80%">
        <h3 class="mb-2 grey-text">@Resource.modificarEncomendaViewTitle @Html.DisplayFor(m => m.Id)</h3>
        <hr />
        <form asp-action="Edit" id="encomendaForm">
            @Html.AntiForgeryToken()
            <input type="hidden" asp-for="Id" />

            <div class="row mt-3">
                <div class="col-md-6 mb-3">
                    <input asp-for="IdLadoCliente" class="form-control" placeholder=@Resource.OrdemDeEncomenda />
                    <span asp-validation-for="IdLadoCliente" class="text-danger"></span>
                </div>
                <div class="col-md-6 mb-3">
                    <input asp-for="Data" type="date" class="form-control" value="@Model.Data.ToString("yyyy-MM-dd")" />
                    <span asp-validation-for="Data" class="text-danger"></span>
                </div>
            </div>

            <div class="row mb-3">
                <div class="col-md-6 mb-3">
                    <input asp-for="Transportadora" class="form-control" placeholder=@Resource.EmpresaTrans/>
                    <span asp-validation-for="Transportadora" class="text-danger"></span>
                </div>
                <div class="col-md-6 mb-3">
                    <input type="hidden" asp-for="ClienteId" id="ClienteId" value="@clienteId" />
                    <input type="text" id="cliente-nome" class="form-control" placeholder=@Resource.NomeDoCliente autocomplete="off" value="@Model.Cliente?.Nome" readonly />
                    <span asp-validation-for="ClienteId" class="text-danger"></span>
                </div>
            </div>

            <div id="pecasSection">
                <div id="sem-cliente" class="text-center mt-4" @(string.IsNullOrEmpty(clienteId) ? "" : "style=\"display:none;\"")>
                    <h5 class="text-muted">@Resource.PorfavorAdicioneClienteParaPecas</h5>
                </div>
                <div id="pecasCards" class="row g-3"></div>
                <div class="mt-2">
                    <button type="button" id="addRestantesPecasBtn" class="btn btn-secondary btn-sm" style="display:none;">@Resource.AdicionarrestantespeçasdoCliente</button>
                </div>
            </div>

            <div id="hidden-inputs-container"></div>

            <div class="row mt-3">
                <div class="col-md-6 mb-3">
                    <label asp-for="Estado" class="form-label">@Resource.Estado</label>
                    <select asp-for="Estado" asp-items="ViewBag.Estado" class="form-control">
                        <option value="">@Resource.SelecioneEstado</option>
                    </select>
                    <span asp-validation-for="Estado" class="text-danger"></span>
                </div>
            </div>

            <div class="row mt-3">
                <div class="col-md-6 mb-3">
                    <input type="text" id="QuantidadeTotal_Visivel" class="form-control" placeholder=@Resource.QuantidadeTotal readonly />
                    <input type="hidden" asp-for="QuantidadeTotal" />
                </div>
                <div class="col-md-6 mb-3">
                    <input type="text" id="TotalPrecoUnit_Visivel" class="form-control" placeholder=@Resource.PrecoTotal readonly />
                    <input type="hidden" asp-for="TotalPrecoUnit" />
                </div>
            </div>

            <div class="form-group mb-3">
                <input type="submit" value=@Resource.GuardarAlteracoes class="btn btn-custom mt-2" />
            </div>
        </form>
    </div>
</div>

@section Scripts {
    @await Html.PartialAsync("_ValidationScriptsPartial")

    <script src="https://code.jquery.com/ui/1.13.2/jquery-ui.min.js"></script>
    <link rel="stylesheet" href="https://code.jquery.com/ui/1.13.2/themes/base/jquery-ui.css" />

    <script>
        $(function () {
            // Inicializa variáveis para armazenar os dadoss das peças e as seleções do utilizador
            let pecasData = {};
            let selecoes = [];
            const hidIds = $('input[name="pecasSelecionadas"]');
            if (hidIds.length) {
                hidIds.each(function (i) {
                    const id = $(this).val();
                    const qtd = parseInt($('input[name="quantidades"]').eq(i).val()) || 1;
                    selecoes.push({ id, quantidade: qtd });
                });
            } else {
                // Carrega seleções do modelo se não houver inputs hidden (ex: em caso de edição)

                selecoes = @Html.Raw(Json.Serialize(Model.LinhasEncomenda.Select(l => new { id = l.PecaId.ToString(), quantidade = l.Quantidade })));
            }
            let loaded = false;

            // Mostra ou esconde a secção de peças com base no cliente selecionado
            function toggleSection() {
                const cId = $('#ClienteId').val();
                if (cId) {
                    $('#sem-cliente').hide();
                    if (!loaded) loadPecas(cId); // Só devee carregar uma vez

                } else {
                    $('#sem-cliente').show();
                    selecoes = [];
                    renderCards();
                    hideButton();
                }
            }

            function loadPecas(clienteId) {
                $.getJSON(`/Encomendas/GetPecasPorCliente?clienteId=${clienteId}`, function (data) {
                    pecasData = {};
                    data.forEach(p => pecasData[p.id] = p);
                    renderCards();  // Desenha os cartões após carregar os dados
                    loaded = true;
                });
            }

            // Cria os cartões das peças selecionadas e atualiza os totais
            function renderCards() {
                const $cards = $('#pecasCards').empty();
                selecoes.forEach(item => {
                    const p = pecasData[item.id];
                    if (!p) return;
                    const price = parseFloat(p.preco).toFixed(2).replace('.', ','); // Formatação do preço com pontos o preço
                    // Adiciona cartão da peça
                    $cards.append(`
                                <div class="col-md-4">
                                    <div class="card shadow-sm">
                                        <img src="${p.imagem}" class="card-img-top img-fluid" style="max-height:100px; object-fit:contain;" />
                                        <div class="card-body" data-id="${item.id}">
                                            <h6 class="card-title">${p.nome}</h6>
                                            <p class="card-text small">Preço unit.: ${price} €</p>
                                            <div class="input-group input-group-sm mb-2">
                                                <input type="number" class="form-control peca-qty" value="${item.quantidade}" min="1" />
                                                <button class="btn btn-danger btn-sm remove-card">@Resource.Remover</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            `);
                });
                updateTotals(); toggleButton();
            }

            function updateTotals() {
                let totalQ = 0, totalP = 0;
                selecoes.forEach(item => {
                    const p = pecasData[item.id];
                    if (p) { totalQ += item.quantidade; totalP += p.preco * item.quantidade; }
                });
                $('#QuantidadeTotal_Visivel').val(totalQ);
                $('#TotalPrecoUnit_Visivel').val(totalP.toFixed(2).replace('.', ','));
                $('input[name="QuantidadeTotal"]').val(totalQ);
                $('input[name="TotalPrecoUnit"]').val(totalP.toFixed(2));
            }

            function toggleButton() {
                const total = Object.keys(pecasData).length;
                const chosen = selecoes.length;
                $('#addRestantesPecasBtn').toggle(chosen < total);
            }

            function hideButton() {
                $('#addRestantesPecasBtn').hide();
            }

            $(document).on('click', '.remove-card', function () {
                const id = $(this).closest('.card-body').data('id').toString();
                selecoes = selecoes.filter(it => it.id !== id);
                renderCards();
            });

            $(document).on('input', '.peca-qty', function () {
                const id = $(this).closest('.card-body').data('id').toString();
                const qtd = parseInt($(this).val()) || 0;
                selecoes = selecoes.map(it => it.id === id ? { id, quantidade: qtd } : it);
                updateTotals();
            });

            $('#addRestantesPecasBtn').click(function () {
                Object.keys(pecasData).forEach(id => {
                    if (!selecoes.some(it => it.id === id)) { selecoes.push({ id, quantidade: 1 }); }
                });
                renderCards();
            });

            $('#encomendaForm').on('submit', function () {
                $('#hidden-inputs-container').empty();
                selecoes.forEach(it => {
                    $('#hidden-inputs-container').append(
                        `<input type="hidden" name="pecasSelecionadas" value="${it.id}" />` +
                        `<input type="hidden" name="quantidades" value="${it.quantidade}" />`
                    );
                });
            });

            hideButton(); toggleSection();
        });
    </script>
}
